    def plot_sdt(self, d_prime):
     
        x = np.linspace(-4, 4, 1000)
    
        
        y_Noise = scipy.stats.norm.pdf(x, loc = 0, scale = 1)
        y_Signal = scipy.stats.norm.pdf(x, loc = d_prime, scale = 1) 
        c = d_prime/2 

        
        Noisetop_y = np.max(y_N)
        Noisestop_x = x[np.argmax(y_N)]
        Signaltop_y = np.max(y_S)
        Signaltop_x = x[np.argmax(y_S)]
    
        # Plot curves and add annotations
        plt.plot(x, y_N, label="Noise") 
        plt.plot(x, y_S, label="Signal") 
        plt.axvline((d_prime/2)+ c,label = 'threshold', color='k', linestyle='--') # plot threshold line C
        plt.plot ([Noisestop_x, Signaltop_x ],[ Noisetop_y, Signaltop_y], label = "d'", linestyle = '-') 
        plt.ylim(ymin=0)
        plt.xlabel('Decision Variable')
        plt.ylabel('Probability')
        plt.title('Signal Detection Theory')
        plt.legend()
        plt.show()
        
        #how to run it
        # apply a variable to signaldetectionn class with values ex. sd = SignalDetection(....)
        sd.plot_sdt(sd.d_prime())
        
        
